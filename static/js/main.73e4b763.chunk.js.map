{"version":3,"sources":["components/Table/index.js","pages/mockData.js","pages/Dashboard.js","pages/tableConstant.js","App.js","serviceWorker.js","index.js"],"names":["Table","cols","data","bordered","hoverable","striped","isDark","class","className","map","headerItem","index","key","title","item","col","render","defaultProps","Dashboard","rowData","id","name","username","email","phone","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oKAGMA,G,KAAQ,SAAC,GAA0D,IAAxDC,EAAuD,EAAvDA,KAAMC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OACvD,OACI,yBAAKC,MAAM,oBACP,2BAAOC,UAAS,gBAAWL,EAAW,iBAAmB,mBAAzC,YAA+DC,GAAa,cAA5E,YAA6FC,GAAW,gBAAxG,YAA2HC,GAAU,eACjJ,+BACI,4BACKL,EAAKQ,KAAI,SAACC,EAAYC,GAAb,OACN,wBAAIC,IAAKD,GAAQD,EAAWG,YAIxC,+BACKX,EAAKO,KAAI,SAACK,EAAMH,GAAP,OACN,wBAAIC,IAAKD,GACJV,EAAKQ,KAAI,SAACM,EAAKH,GAAN,OACN,wBAAIA,IAAKA,GAAMG,EAAIC,OAAOF,gBAmB1Dd,EAAMiB,aAAe,CACjBd,UAAU,EACVC,WAAW,EACXC,SAAS,EACTC,QAAQ,GAGGN,QC5CFE,EAAO,CAClB,CACE,GAAM,EACN,KAAQ,OACR,SAAY,SACZ,MAAS,iBACT,MAAS,SAGX,CACE,GAAM,EACN,KAAQ,MACR,SAAY,QACZ,MAAS,eACT,MAAS,OAGX,CACE,GAAM,EACN,KAAQ,QACR,SAAY,UACZ,MAAS,kBACT,MAAS,OAGX,CACE,GAAM,EACN,KAAQ,SACR,SAAY,WACZ,MAAS,mBACT,MAAS,OAGX,CACE,GAAM,EACN,KAAQ,UACR,SAAY,YACZ,MAAS,oBACT,MAAS,SAKX,CACE,GAAM,EACN,KAAQ,QACR,SAAY,UACZ,MAAS,kBACT,MAAS,aC1BEgB,EAhBG,WAMhB,OACE,yBAAKV,UAAU,OACb,yBAAKA,UAAU,YACb,qCACA,kBAAC,EAAD,CAAOP,KCZN,CACL,CACEY,MAAO,KACPG,OAAQ,SAAAG,GACN,OAAO,8BAAOA,EAAQC,MAG1B,CACEP,MAAO,OACPG,OAAQ,SAAAG,GACN,OAAO,8BAAOA,EAAQE,QAG1B,CACER,MAAO,WACPG,OAAQ,SAAAG,GACN,OAAO,8BAAOA,EAAQG,YAG1B,CACET,MAAO,QACPG,OAAQ,SAAAG,GACN,OAAO,8BAAOA,EAAQI,SAG1B,CACEV,MAAO,QACPG,OAAQ,SAAAG,GACN,OAAO,8BAAOA,EAAQK,UDhBmBtB,KAAMA,OEJxCuB,MARf,WACE,OACE,yBAAKjB,UAAU,mBACb,kBAAC,EAAD,QCKckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,KCVNC,IAASf,OACP,kBAAC,IAAMgB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.73e4b763.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types'\n\nconst Table = ({ cols, data, bordered, hoverable, striped, isDark }) => {\n    return (\n        <div class=\"table-responsive\">\n            <table className={`table ${bordered ? 'table-bordered' : 'table-borderless'} ${hoverable && 'table-hover'} ${striped && 'table-striped'} ${isDark && 'table-dark'}`}>\n                <thead>\n                    <tr>\n                        {cols.map((headerItem, index) => (\n                            <th key={index}>{headerItem.title}</th>\n                        ))}\n                    </tr>\n                </thead>\n                <tbody>\n                    {data.map((item, index) => (\n                        <tr key={index}>\n                            {cols.map((col, key) => (\n                                <td key={key}>{col.render(item)}</td>\n                            ))}\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nTable.propTypes = {\n    cols: PropTypes.array.isRequired,\n    data: PropTypes.array.isRequired,\n    bordered: PropTypes.bool,\n    hoverable: PropTypes.bool,\n    striped: PropTypes.bool,\n    isDark: PropTypes.bool,\n}\n\nTable.defaultProps = {\n    bordered: true,\n    hoverable: false,\n    striped: false,\n    isDark: false,\n}\n\nexport default Table;","export const data = [\n  {\n    \"id\": 1,\n    \"name\": \"Anuj\",\n    \"username\": \"anuj11\",\n    \"email\": \"a1@gmail.com  \",\n    \"phone\": \"12345\",\n    \n  },\n  {\n    \"id\": 2,\n    \"name\": \"Ram\",\n    \"username\": \"ram22\",\n    \"email\": \"r2@gmail.com\",\n    \"phone\": \"321\",\n    \n  },\n  {\n    \"id\": 3,\n    \"name\": \"Ankit\",\n    \"username\": \"ankit33\",\n    \"email\": \"ankit@gmail.com\",\n    \"phone\": \"456\",\n    \n  },\n  {\n    \"id\": 4,\n    \"name\": \"Pathak\",\n    \"username\": \"pathak44\",\n    \"email\": \"pathak@gmail.com\",\n    \"phone\": \"654\",\n    \n  },\n  {\n    \"id\": 5,\n    \"name\": \"Shubham\",\n    \"username\": \"shubham55\",\n    \"email\": \"shubham@gmail.com\",\n    \"phone\": \"14569\",\n    \n  },\n\n\n  {\n    \"id\": 6,\n    \"name\": \"Suraj\",\n    \"username\": \"suraj66\",\n    \"email\": \"suraj@gmail.com\",\n    \"phone\": \"14565599\",\n    \n  }\n]","import React from \"react\";\n\nimport Table from \"../components/Table\";\nimport { data } from \"./mockData\";\nimport { tableConstants } from \"./tableConstant\";\n\nconst Dashboard = () => {\n  const handleEdit = (item) => () => {\n    // write your logic\n    alert(JSON.stringify(item));\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-sm-6\">\n        <h4>Table</h4>\n        <Table cols={tableConstants(handleEdit)} data={data} />\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import React from 'react';\n\n// This is the table constant/settings which needed to render table elements\nexport const tableConstants = (handleEdit) => {\n  return [\n    {\n      title: 'ID',\n      render: rowData => {\n        return <span>{rowData.id}</span>;\n      },\n    },\n    {\n      title: 'Name',\n      render: rowData => {\n        return <span>{rowData.name}</span>;\n      },\n    },\n    {\n      title: 'Username',\n      render: rowData => {\n        return <span>{rowData.username}</span>;\n      },\n    },\n    {\n      title: 'Email',\n      render: rowData => {\n        return <span>{rowData.email}</span>;\n      },\n    },\n    {\n      title: 'Phone',\n      render: rowData => {\n        return <span>{rowData.phone}</span>;\n      },\n    },\n   \n    \n     \n    \n  ];\n};\n","import React from 'react';\n\nimport Dashboard from './pages/Dashboard';\n\nfunction App() {\n  return (\n    <div className=\"container-fluid\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}